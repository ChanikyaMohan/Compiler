


package cop5556sp17;



import java.io.ByteArrayOutputStream;

import java.io.FileOutputStream;

import java.io.OutputStream;

import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;

import org.junit.Test;

import static org.junit.Assert.*;

import org.junit.rules.ExpectedException;



import cop5556sp17.AST.ASTNode;

import cop5556sp17.AST.Program;







public class CodeGenVisitorTest {



        static final boolean doPrint = true;
        @Before
        public void initLog(){
        if (devel || grade) PLPRuntimeLog.initLog();
        }
        @After
        public void printLog(){
        System.out.println(PLPRuntimeLog.getString());
        }
        static void show(Object s) {

                if (doPrint) {

                        System.out.println(s);

                }

        }



        @Rule

        public ExpectedException thrown = ExpectedException.none();



        boolean devel = false;

        boolean grade = true;





    	/* simple test to load an image from a file, set it in a frame, move it and show.
    	 * get the x and y loc of the frame, scale the image by double and move it by adding
    	 * 500 to its original xloc and yloc and show */
    	@Test
    	public void assng6Test10() throws Exception {
    		String name = "assng6Test10";
    		String input = name + " file in, file in1 {\n integer j integer j1 frame f image i image i1 frame fm integer x integer y";
    		input += " in->i;}";
    		//input += " in->i->fm->move(1,2)->show; sleep(1000);\n fm->xloc->x; fm->yloc->y;";
    		//input += " i->scale(2)->fm->move(x+500, y+500)->show; sleep(4000);}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image3.jpg");
    		args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void testParamDecProg0() throws Exception {
    		String name = "testParamDecProg0";
    		String input = name + " integer b, boolean c { c <- c; b <- b; b <- 2; c <- true; c <- false; b <- 3;}";

    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[]{"1", "false"};

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void readFromURLandWriteToFile2() throws Exception {
    		String name = "readFromURLandWriteToFile2";
    		String input = name + " url u, \nfile out \n{image i frame f \nu -> gray  -> i;\n i -> f -> show; \n i -> out;\n}";
    		// String input = name + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5000; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100);\n}"; // -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}



    	@Test
    	public void readFromURLandWriteToFile3() throws Exception {
    		String name = "readFromURLandWriteToFile3";
    		String input = name + " url u, \nfile out \n{\nu -> gray  -> out;\n}";
    		// String input = name + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5000; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100);\n}"; // -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}



    	@Test
    	public void sleepImg() throws Exception {
    		String name = "sleepImg";
    		String input = name + " url u, \nfile out \n{\nu -> gray  -> out;\n}";
    		// String input = name + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5000; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100);\n}"; // -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}



    	@Test
    	public void addImage() throws Exception {
    		String name = "addImage";
    		String input = "addImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;  sleep 5000; k <- k + i; k -> f -> show; \n}";
    		//String input = "addImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i; k -> f -> show;}";

    		// String input = name + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5000; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100);\n}"; // -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}



    	@Test
    	public void convolveImg() throws Exception {
    		String name = "convolveImg";
    		String input = "convolveImg url u {image i frame f \nu -> i -> convolve -> f -> show; sleep 5000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}


    	@Test
    	public void readFromURLandDisplay() throws Exception {
    		String name = "readFromURLandDisplay";
    		String input = "readFromURLandDisplay url u {image i frame f \nu -> i;i -> f -> show; sleep 3000; \n}";
			Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void imgMove2() throws Exception {
    		String name = "imgMove2";
    		//String input = "readFromURLandDisplay url u {image i frame f \nu -> i;i -> f -> show; sleep 3000; \n}";
			String input = "imgMove2 url u {image i frame f \nu -> i;"
					+ "i -> f -> show; \nsleep 5000; "
					+ "\ninteger x \ninteger y \n"
					+ "x <- screenwidth;\ny <-  screenheight; \nf -> move (x*3/4,y/4) -> show; sleep 5000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}


    	@Test
    	public void subImage2() throws Exception {
    		String name = "subImage2";
    		//String input = "readFromURLandDisplay url u {image i frame f \nu -> i;i -> f -> show; sleep 3000; \n}";
			String input = "subImage2 url u {image i image j  frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show; sleep 5000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}



    	@Test
    	public void modImage() throws Exception {
    		String name = "modImage";
    		//String input = "readFromURLandDisplay url u {image i frame f \nu -> i;i -> f -> show; sleep 3000; \n}";
			String input = "modImage url u {image i image j  frame f \nu -> j; \n i <- j%128; i -> f -> show; sleep 3000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}


    	@Test
    	public void allTheOps() throws Exception {
    		String name = "allTheOps";
    		//String input = "readFromURLandDisplay url u {image i frame f \nu -> i;i -> f -> show; sleep 3000; \n}";
			String input = "allTheOps file u {image i frame f \nu -> i |-> gray -> convolve -> blur -> i -> f -> show; sleep 5000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		//args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}



    	@Test
    	public void readFromURLandDisplayDisplay2() throws Exception {
    		String name = "readFromURLandDisplayDisplay2";
    		String input = "readFromURLandDisplayDisplay2 url u {image i frame f \nu -> i -> f -> show; sleep 3000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}



    	@Test
    	public void readFromURLandWriteToFile() throws Exception {
    		String name = "readFromURLandWriteToFile";
    		String input = "readFromURLandWriteToFile url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}


    	@Test
    	public void blurImg() throws Exception {
    		String name = "blurImg";
    		String input = "blurImg url u {image i frame f \nu -> i -> blur -> f -> show; sleep 3000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}


    	@Test
    	public void grayImg() throws Exception {
    		String name = "grayImg";
    		String input = "grayImg url u {image i frame f \nu -> i |-> gray -> f -> show; sleep 3000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}



    	@Test
    	public void divImage() throws Exception {
    		String name = "divImage";
    		String input = "divImage url u {image i image j  frame f \nu -> j; \n i <- j/2; i -> f -> show; sleep 3000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}



    	@Test
    	public void readFromURLandWriteScaledImageToFile() throws Exception {
    		String name = "readFromURLandWriteScaledImageToFile";
    		String input = "readFromURLandWriteScaledImageToFile url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[1] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}


    	@Test
    	public void readFromFile() throws Exception {
    		String name = "readFromFile";
    		String input = "readFromFile file u {image i frame f \nu -> i;i -> f -> show; sleep 2000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		//args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}



    	@Test
    	public void barArrowGray() throws Exception {
    		String name = "barArrowGray";
    		String input = "barArrowGray url u {image i frame f \nu -> i |-> gray -> f -> show; sleep 2000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();

    	}

    	@Test
    	public void assignImage() throws Exception {
    		String name = "assignImage";
    		String input = "assignImage url u {image i image j frame f \nu -> i; j <- i;j -> f -> show; sleep 2000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();

    	}



    	@Test
    	public void scaleImage() throws Exception {
    		String name = "scaleImage";
    		String input = "scaleImage url u {image i frame f \nu -> i -> f -> show; frame f2  \ni -> scale (3) -> f2 -> show; sleep 2000;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();

    	}


    	@Test
    	public void imgMove() throws Exception {
    		String name = "imgMove";
    		String input = "imgMove url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5000; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();

    	}

    	@Test
    	public void assignImageAndFrame() throws Exception {
    		String name = "assignImageAndFrame";
    		String input = "assignImageAndFrame url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2  \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		//args[0] = new String("C:\\Users\\konya\\workspace\\PLPHomework\\image.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		//instance.run();

    	}

}



